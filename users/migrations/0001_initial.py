# Generated by Django 5.1.1 on 2025-05-04 11:03

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='group name')),
                ('description', models.TextField(verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(default='Unknown User', max_length=100, verbose_name='full name')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m/%d/', verbose_name='avatar')),
                ('bio', models.TextField(blank=True, max_length=500, null=True, verbose_name='biography')),
                ('sessions_attended', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='sessions attended')),
                ('study_hours', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='study hours')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_active', models.DateTimeField(auto_now=True, verbose_name='last active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True, verbose_name='token')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('expires_at', models.DateTimeField(verbose_name='expires at')),
                ('is_used', models.BooleanField(default=False, verbose_name='is used')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'password reset token',
                'verbose_name_plural': 'password reset tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='session title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_time', models.DateTimeField(verbose_name='start time')),
                ('end_time', models.DateTimeField(verbose_name='end time')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='location')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='users.group')),
            ],
            options={
                'verbose_name': 'study session',
                'verbose_name_plural': 'study sessions',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('resource_type', models.CharField(choices=[('NOTE', 'Notes'), ('BOOK', 'Book'), ('SLIDE', 'Slides'), ('VIDEO', 'Video'), ('OTHER', 'Other')], default='OTHER', max_length=5, verbose_name='resource type')),
                ('file', models.FileField(upload_to='resources/%Y/%m/%d/', verbose_name='file')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_resources_in_users', to=settings.AUTH_USER_MODEL, verbose_name='uploaded by')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resources', to='users.studysession')),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university', models.CharField(blank=True, max_length=255, verbose_name='university')),
                ('department', models.CharField(blank=True, max_length=255, verbose_name='department')),
                ('academic_level', models.CharField(blank=True, max_length=50, verbose_name='academic level')),
                ('skills', models.TextField(blank=True, help_text='Comma-separated list of skills', verbose_name='skills')),
                ('linkedin_url', models.URLField(blank=True, null=True, verbose_name='LinkedIn URL')),
                ('github_url', models.URLField(blank=True, null=True, verbose_name='GitHub URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('session_reminders', models.BooleanField(default=True)),
                ('group_messages', models.BooleanField(default=True)),
                ('resource_updates', models.BooleanField(default=True)),
                ('new_member_alerts', models.BooleanField(default=True)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=10)),
                ('show_profile_stats', models.BooleanField(default=True)),
                ('show_uploaded_resources', models.BooleanField(default=True)),
                ('show_group_memberships', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('MODERATOR', 'Moderator'), ('MEMBER', 'Member')], default='MEMBER', max_length=10, verbose_name='role')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='joined at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='users.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'group membership',
                'verbose_name_plural': 'group memberships',
                'ordering': ['-joined_at'],
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.CreateModel(
            name='SessionAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PRESENT', 'Present'), ('ABSENT', 'Absent'), ('LATE', 'Late')], default='PRESENT', max_length=7, verbose_name='attendance status')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='joined at')),
                ('left_at', models.DateTimeField(blank=True, null=True, verbose_name='left at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_attendances', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='users.studysession')),
            ],
            options={
                'verbose_name': 'session attendance',
                'verbose_name_plural': 'session attendances',
                'ordering': ['-joined_at'],
                'unique_together': {('session', 'user')},
            },
        ),
    ]
